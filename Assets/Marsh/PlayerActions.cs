//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Marsh/PlayerActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerActions : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerActions"",
    ""maps"": [
        {
            ""name"": ""Fly"",
            ""id"": ""66e835b0-dec8-40fa-8c9c-2abc2559f45d"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""434365f6-94fa-4333-a46d-898cc4663980"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Look"",
                    ""type"": ""Value"",
                    ""id"": ""813b8420-5392-43c5-9740-2548c843145b"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Build"",
                    ""type"": ""Value"",
                    ""id"": ""a316dea4-622e-4e0e-9cba-a038cfa85be7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RemoveTerrain"",
                    ""type"": ""Button"",
                    ""id"": ""4e3cf8c8-e4c6-470a-ae6c-29789918abfd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""Keyboard"",
                    ""id"": ""d82bf6d1-ace7-463e-bab2-8e8b027ad131"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""a3315c1f-309a-4ab8-8f9f-d1c7432da880"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""551709de-46a3-4197-b873-93d952fffa4f"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""df395eae-6e39-48c2-93a2-90edb32b6a33"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""57464a7b-4398-48ad-8e9e-d067fc1232e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""forward"",
                    ""id"": ""350925be-f289-4466-ba4f-6aba577a4c4f"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""backward"",
                    ""id"": ""92c11934-b0a5-4215-b0d9-24aadf98b850"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""a28a3762-2a12-400e-9ccd-802994260965"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Look"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9133a4bb-dddb-4df8-9aec-3a21d27f461b"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Build"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c3defe4f-1bb3-4c4f-b1ea-f2d80efc1093"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RemoveTerrain"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Fly
        m_Fly = asset.FindActionMap("Fly", throwIfNotFound: true);
        m_Fly_Move = m_Fly.FindAction("Move", throwIfNotFound: true);
        m_Fly_Look = m_Fly.FindAction("Look", throwIfNotFound: true);
        m_Fly_Build = m_Fly.FindAction("Build", throwIfNotFound: true);
        m_Fly_RemoveTerrain = m_Fly.FindAction("RemoveTerrain", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Fly
    private readonly InputActionMap m_Fly;
    private IFlyActions m_FlyActionsCallbackInterface;
    private readonly InputAction m_Fly_Move;
    private readonly InputAction m_Fly_Look;
    private readonly InputAction m_Fly_Build;
    private readonly InputAction m_Fly_RemoveTerrain;
    public struct FlyActions
    {
        private @PlayerActions m_Wrapper;
        public FlyActions(@PlayerActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Fly_Move;
        public InputAction @Look => m_Wrapper.m_Fly_Look;
        public InputAction @Build => m_Wrapper.m_Fly_Build;
        public InputAction @RemoveTerrain => m_Wrapper.m_Fly_RemoveTerrain;
        public InputActionMap Get() { return m_Wrapper.m_Fly; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(FlyActions set) { return set.Get(); }
        public void SetCallbacks(IFlyActions instance)
        {
            if (m_Wrapper.m_FlyActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_FlyActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_FlyActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_FlyActionsCallbackInterface.OnMove;
                @Look.started -= m_Wrapper.m_FlyActionsCallbackInterface.OnLook;
                @Look.performed -= m_Wrapper.m_FlyActionsCallbackInterface.OnLook;
                @Look.canceled -= m_Wrapper.m_FlyActionsCallbackInterface.OnLook;
                @Build.started -= m_Wrapper.m_FlyActionsCallbackInterface.OnBuild;
                @Build.performed -= m_Wrapper.m_FlyActionsCallbackInterface.OnBuild;
                @Build.canceled -= m_Wrapper.m_FlyActionsCallbackInterface.OnBuild;
                @RemoveTerrain.started -= m_Wrapper.m_FlyActionsCallbackInterface.OnRemoveTerrain;
                @RemoveTerrain.performed -= m_Wrapper.m_FlyActionsCallbackInterface.OnRemoveTerrain;
                @RemoveTerrain.canceled -= m_Wrapper.m_FlyActionsCallbackInterface.OnRemoveTerrain;
            }
            m_Wrapper.m_FlyActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @Look.started += instance.OnLook;
                @Look.performed += instance.OnLook;
                @Look.canceled += instance.OnLook;
                @Build.started += instance.OnBuild;
                @Build.performed += instance.OnBuild;
                @Build.canceled += instance.OnBuild;
                @RemoveTerrain.started += instance.OnRemoveTerrain;
                @RemoveTerrain.performed += instance.OnRemoveTerrain;
                @RemoveTerrain.canceled += instance.OnRemoveTerrain;
            }
        }
    }
    public FlyActions @Fly => new FlyActions(this);
    public interface IFlyActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnLook(InputAction.CallbackContext context);
        void OnBuild(InputAction.CallbackContext context);
        void OnRemoveTerrain(InputAction.CallbackContext context);
    }
}
